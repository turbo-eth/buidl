{
  "name": "nonce",
  "dependencies": [
    "wagmi"
  ],
  "registryDependencies": [
    "skeleton",
    "error-message"
  ],
  "files": [
    {
      "name": "nonce.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  useAccount,\n  useChainId,\n  usePublicClient,\n  useQuery,\n  type PublicClient,\n} from \"wagmi\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ErrorMessage } from \"@/registry/default/buidl/error-message\"\nimport { Skeleton } from \"@/registry/default/ui/skeleton\"\n\ninterface NonceProps extends React.HTMLAttributes<HTMLDivElement> {\n  address?: `0x${string}`\n  chainId?: number\n  displayLoading?: boolean\n  displayError?: boolean\n}\n\nconst useNonce = ({\n  address,\n  publicClient,\n}: Pick<NonceProps, \"address\"> & { publicClient: PublicClient }) => {\n  return useQuery([\"wallet-nonce\", address, publicClient.chain.id], {\n    queryFn: () => {\n      if (!address) return\n      return publicClient?.getTransactionCount({\n        address,\n      })\n    },\n    enabled: !!address && !!publicClient,\n  })\n}\n\nconst Nonce = React.forwardRef<HTMLDivElement, NonceProps>(\n  (\n    {\n      className,\n      address,\n      chainId,\n      displayLoading = true,\n      displayError = true,\n      ...props\n    },\n    ref\n  ) => {\n    const connectedChainId = useChainId()\n    const selectedChainId = chainId ?? connectedChainId\n\n    const publicClient = usePublicClient({\n      chainId: selectedChainId,\n    })\n\n    const { address: connectedAddress } = useAccount()\n    const selectedAddress = address ?? connectedAddress\n\n    const { data, isLoading, isError, error } = useNonce({\n      publicClient,\n      address: selectedAddress,\n    })\n\n    if (displayLoading && (isLoading || !selectedAddress)) {\n      return <Skeleton className={cn(\"h-6 w-14\", className)} {...props} />\n    }\n\n    if (displayError && isError) {\n      return (\n        <ErrorMessage\n          defaultErrorMessage=\"Error while fetching nonce\"\n          error={error as Error | null}\n          {...props}\n        />\n      )\n    }\n\n    return (\n      <div ref={ref} className={className} {...props}>\n        {data}\n      </div>\n    )\n  }\n)\n\nNonce.displayName = \"Nonce\"\n\nexport { Nonce }\n"
    }
  ],
  "type": "components:buidl"
}