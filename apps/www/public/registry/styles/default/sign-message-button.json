{
  "name": "sign-message-button",
  "dependencies": [
    "wagmi"
  ],
  "registryDependencies": [
    "button",
    "error-message"
  ],
  "files": [
    {
      "name": "sign-message-button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useSignMessage } from \"wagmi\"\n\nimport { ErrorMessage } from \"@/registry/default/buidl/error-message\"\nimport { Button, ButtonProps } from \"@/registry/default/ui/button\"\n\ninterface SignMessageButtonProps extends Omit<ButtonProps, \"onCick\"> {\n  message: string\n  displayError?: boolean\n  onSuccess?: (signature: string) => void\n}\n\nconst SignMessageButton = React.forwardRef<\n  HTMLButtonElement,\n  SignMessageButtonProps\n>(({ message, onSuccess, className, children, disabled, displayError=true, ...props }, ref) => {\n  const { isLoading, isError, error, signMessage } = useSignMessage({\n    message,\n    onSuccess,\n  })\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        disabled={disabled || isLoading || message.length === 0}\n        onClick={() => signMessage()}\n        className={className}\n        {...props}\n      >\n        {isLoading ? \"Check Wallet\" : children ?? \"Sign Message\"}\n      </Button>\n      {isError && displayError && (\n        <ErrorMessage\n          error={error}\n          defaultErrorMessage=\"Error while signing message\"\n        />\n      )}\n    </>\n  )\n})\n\nSignMessageButton.displayName = \"SignMessageButton\"\n\nexport { SignMessageButton }\n"
    }
  ],
  "type": "components:buidl"
}