{
  "name": "sign-message-button",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "sign-message-button.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useSignMessage } from \"wagmi\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, ButtonProps } from \"@/registry/default/ui/button\"\n\ninterface SignMessageButtonProps extends Omit<ButtonProps, \"onCick\"> {\n  message: string\n  onSuccess?: (signature: string) => void\n}\n\nconst ErrorMessage = ({ error }: { error: Error | null }) => {\n  return (\n    <div className={cn(\"break-words text-sm font-medium text-red-500\")}>\n      {error?.message ?? \"Error while signing message\"}\n    </div>\n  )\n}\n\nconst SignMessageButton = React.forwardRef<\n  HTMLButtonElement,\n  SignMessageButtonProps\n>(({ message, onSuccess, className, children, disabled, ...props }, ref) => {\n  const { isLoading, isError, error, signMessage } = useSignMessage({\n    message,\n    onSuccess,\n  })\n\n  return (\n    <>\n      <Button\n        ref={ref}\n        disabled={isLoading || disabled}\n        onClick={() => signMessage()}\n        className={className}\n        {...props}\n      >\n        {isLoading ? \"Check Wallet\" : children ?? \"Sign Message\"}\n      </Button>\n      {isError && <ErrorMessage error={error} />}\n    </>\n  )\n})\n\nSignMessageButton.displayName = \"SignMessageButton\"\n\nexport { SignMessageButton }\n"
    }
  ],
  "type": "components:buidl"
}