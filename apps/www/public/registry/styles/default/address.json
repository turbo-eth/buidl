{
  "name": "address",
  "dependencies": [
    "wagmi"
  ],
  "registryDependencies": [
    "toast"
  ],
  "files": [
    {
      "name": "address.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Copy } from \"lucide-react\"\nimport { useAccount, useNetwork, type Address as AddressType } from \"wagmi\"\nimport { mainnet } from \"wagmi/chains\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toast } from \"@/registry/default/ui/use-toast\"\n\nexport interface AddressProps\n  extends Omit<React.HTMLAttributes<HTMLElement>, \"children\"> {\n  address?: AddressType\n  truncate?: boolean\n  truncateAmount?: number\n  link?: boolean\n  copy?: boolean\n}\n\nconst AddressCopy = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    address: AddressType\n  }\n>(({ address, className, children, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\"flex cursor-pointer items-center gap-x-2\", className)}\n      onClick={async () => {\n        await navigator.clipboard.writeText(address)\n        toast({\n          title: \"Copied address\",\n          description: \"The address has been copied to your clipboard.\",\n        })\n      }}\n      {...props}\n    >\n      {children ?? address}\n      <span className=\"sr-only\">Copy address</span>\n      <Copy size={12} />\n    </div>\n  )\n})\n\nAddressCopy.displayName = \"AddressCopy\"\n\nconst AddressLink = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    address: AddressType\n  }\n>(({ address, className, children, ...props }, ref) => {\n  const { chain: currentChain } = useNetwork()\n\n  // Use mainnet as default chain\n  const chain = currentChain ?? mainnet\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"cursor-pointer underline-offset-2 hover:underline\",\n        className\n      )}\n      {...props}\n    >\n      {chain.blockExplorers?.default.url ? (\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={`${chain.blockExplorers?.default.url}/address/${address}`}\n        >\n          {children ?? address}\n        </a>\n      ) : (\n        <>{children ?? address}</>\n      )}\n    </div>\n  )\n})\n\nAddressLink.displayName = \"AddressLink\"\n\nconst Address = React.forwardRef<HTMLDivElement, AddressProps>(\n  (\n    { address, className, truncate, truncateAmount = 4, link, copy, ...props },\n    ref\n  ) => {\n    const { address: connectedAddress } = useAccount()\n\n    const selectedAddress = address ?? connectedAddress\n\n    const formattedAddress = React.useMemo(\n      () =>\n        truncate\n          ? `${selectedAddress?.slice(\n              0,\n              truncateAmount + 2\n            )}...${selectedAddress?.slice(-Number(truncateAmount))}`\n          : selectedAddress,\n      [selectedAddress, truncate, truncateAmount]\n    )\n\n    if (!selectedAddress) {\n      return null\n    }\n\n    if (link) {\n      return (\n        <AddressLink\n          ref={ref}\n          address={selectedAddress}\n          className={className}\n          {...props}\n        >\n          {copy ? (\n            <AddressCopy address={selectedAddress}>\n              {formattedAddress}\n            </AddressCopy>\n          ) : (\n            <>{formattedAddress}</>\n          )}\n        </AddressLink>\n      )\n    }\n\n    if (copy) {\n      return (\n        <AddressCopy ref={ref} address={selectedAddress} {...props}>\n          {formattedAddress}\n        </AddressCopy>\n      )\n    }\n\n    return (\n      <span ref={ref} className={className} {...props}>\n        {formattedAddress}\n      </span>\n    )\n  }\n)\n\nAddress.displayName = \"Address\"\n\nexport { Address, AddressCopy, AddressLink }\n"
    }
  ],
  "type": "components:buidl"
}