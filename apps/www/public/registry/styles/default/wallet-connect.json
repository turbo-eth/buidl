{
  "name": "wallet-connect",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "wallet-connect.tsx",
      "content": "\"use client\"\n\nimport { connect } from \"@wagmi/core\"\nimport { CoinbaseWalletConnector } from \"@wagmi/core/dist/connectors/coinbaseWallet\"\nimport { MetaMaskConnector } from \"@wagmi/core/dist/connectors/metaMask\"\nimport { ChevronRight, RefreshCcw } from \"lucide-react\"\nimport Image from \"next/image\"\nimport * as React from \"react\"\nimport { useState } from \"react\"\n\nimport { WagmiProvider } from \"@/components/providers/wagmi-provider\"\nimport { connectors } from \"@/config/connectors\"\nimport { cn } from \"@/lib/utils\"\n\nimport { Button } from \"../ui/button\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"../ui/dialog\"\n\ntype WalletConnect = React.HTMLAttributes<HTMLButtonElement>\n\nexport const WalletConnect = ({ children, className }: WalletConnect) => {\n  const [isError, setIsError] = useState()\n  const [selectedConnectorId, setSelectedConnectorId] = useState<\n    string | undefined\n  >()\n\n  const handleReset = () => {\n    setSelectedConnectorId(undefined)\n    setIsError(undefined)\n  }\n\n  const handleBack = () => {\n    setSelectedConnectorId(undefined)\n    setIsError(undefined)\n  }\n\n  return (\n    <Dialog onOpenChange={handleReset}>\n      <DialogTrigger>\n        <Button className={cn(className)}>\n          {children ?? \"Connect Wallet\"}\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <WagmiProvider>\n          <DialogHeader>\n            <DialogTitle>Connect Wallet</DialogTitle>\n            <hr className=\"my-6 mb-10\" />\n            {selectedConnectorId && (\n              <>\n                <div className=\"flex cursor-pointer items-center gap-x-1\" onClick={handleBack}>\n                  <ChevronRight size={18} className=\"rotate-180\" />\n                  <span className=\"text-xs\">Back</span>\n                </div>\n                <WalletConnectionStatus\n                  connector={connectors.find(\n                    (connector) => connector.id === selectedConnectorId\n                  )}\n                  selectedConnectorId={selectedConnectorId}\n                  isError={isError}\n                  setIsError={setIsError}\n                />\n              </>\n            )}\n            {!selectedConnectorId && (\n              <div className=\"mt-6 grid gap-y-3 py-3\">\n                {connectors.map((connector, index) => (\n                  <WalletPreview\n                    key={index}\n                    connector={connector}\n                    selectConnector={() =>\n                      setSelectedConnectorId(connector?.id)\n                    }\n                    setIsError={setIsError}\n                  />\n                ))}\n              </div>\n            )}\n          </DialogHeader>\n        </WagmiProvider>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst WalletIdToIcon = {\n  metaMask: \"/images/wallets/metaMask.svg\",\n  coinbaseWallet: \"/images/wallets/coinbaseWallet.webp\",\n} as {\n  [key: string]: string\n}\n\ntype WalletPreview = React.HTMLAttributes<HTMLElement> & {\n  connector: MetaMaskConnector | CoinbaseWalletConnector\n  selectConnector: () => void\n  setIsError: (error: any) => void\n}\n\nexport const WalletPreview = ({\n  className,\n  connector,\n  selectConnector,\n  setIsError,\n}: WalletPreview) => {\n  const classes = cn(\n    \"flex cursor-pointer items-center gap-x-2 rounded-md border-2 p-2 hover:bg-neutral-100\",\n    className\n  )\n  const WalletImage = WalletIdToIcon[connector.id]\n  const handleConnect = async () => {\n    selectConnector()\n    try {\n      await connect({\n        connector: connector,\n      })\n    } catch (error) {\n      console.log(error)\n      setIsError(error)\n    }\n  }\n\n  return (\n    <div className={classes} onClick={handleConnect}>\n      <Image\n        alt={`${connector.name}`}\n        width={18}\n        height={18}\n        src={WalletImage}\n        className=\"h-8 w-8\"\n      />\n      <h3 className=\"text-lg font-normal\">{connector.name}</h3>\n    </div>\n  )\n}\n\ntype WalletConnectionStatus = React.HTMLAttributes<HTMLElement> & {\n  connector?: MetaMaskConnector | CoinbaseWalletConnector\n  selectedConnectorId: string\n  isError?: boolean\n  setIsError: (error: any) => void\n}\n\nexport const WalletConnectionStatus = ({\n  className,\n  connector,\n  selectedConnectorId,\n  isError,\n  setIsError,\n}: WalletConnectionStatus) => {\n  const classes = cn(className)\n  const WalletImage = WalletIdToIcon[connector?.id || \"default\"]\n\n  const handleConnect = async () => {\n    try {\n      if (!connector) return\n      await connect({\n        connector: connector,\n      })\n    } catch (error) {\n      console.log(error)\n      setIsError(error)\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col items-center gap-y-2 py-10\">\n      <Image\n        alt={`${selectedConnectorId}`}\n        width={48}\n        height={48}\n        src={WalletIdToIcon[selectedConnectorId]}\n        className=\"h-16 w-16\"\n      />\n      <h3 className=\"text-lg font-medium uppercase\">{selectedConnectorId}</h3>\n      {isError && (\n        <div className=\"flex items-center gap-x-2 text-red-500\">\n          <span className=\"text-xs\">Error connecting to wallet</span>\n        </div>\n      )}\n      <p className=\"text-xs\">Accept the connection request in your wallet</p>\n      <Button size=\"sm\" className=\"mt-2\" onClick={handleConnect}>\n        <RefreshCcw size={12} className=\"mr-2\" />\n        <span className=\"\">Try Again</span>\n      </Button>\n    </div>\n  )\n}\n"
    }
  ],
  "type": "components:buidl"
}