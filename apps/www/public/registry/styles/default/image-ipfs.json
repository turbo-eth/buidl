{
  "name": "image-ipfs",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "image-ipfs.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Skeleton } from \"@/registry/default/ui/skeleton\"\n\nconst ErrorMessage = ({ error }: { error: Error | null }) => {\n  return (\n    <div className={cn(\"break-words text-sm font-medium text-red-500\")}>\n      {error?.message ?? \"Error while fetching image\"}\n    </div>\n  )\n}\n\ninterface ImageIpfsProps extends React.HTMLAttributes<HTMLImageElement> {\n  ipfsGatewayUrl?: string\n  src: string\n  alt: string\n}\n\nconst ImageIpfs = React.forwardRef<HTMLImageElement, ImageIpfsProps>(\n  (\n    { className, src, alt, ipfsGatewayUrl = \"https://ipfs.io/ipfs/\", ...props },\n    ref\n  ) => {\n    const [isLoading, setIsLoading] = React.useState(true)\n    const [isError, setIsError] = React.useState(false)\n\n    const imgSrc = React.useMemo(\n      () =>\n        src?.startsWith(\"ipfs://\")\n          ? src.replace(\"ipfs://\", ipfsGatewayUrl)\n          : src,\n      [src, ipfsGatewayUrl]\n    )\n\n    return (\n      <>\n        {isError ? (\n          <ErrorMessage error={null} />\n        ) : isLoading ? (\n          <Skeleton className={className} {...props} />\n        ) : null}\n        <img\n          ref={ref}\n          alt={alt}\n          src={imgSrc}\n          onLoad={() => setIsLoading(false)}\n          onError={() => setIsError(true)}\n          className={cn((isLoading || isError) && \"hidden\", className)}\n          {...props}\n        />\n      </>\n    )\n  }\n)\n\nImageIpfs.displayName = \"ImageIpfs\"\n\nexport { ImageIpfs }\n"
    }
  ],
  "type": "components:buidl"
}