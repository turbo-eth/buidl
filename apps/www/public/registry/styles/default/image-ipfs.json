{
  "name": "image-ipfs",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "image-ipfs.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ErrorMessage } from \"@/registry/default/buidl/error-message\"\nimport { Skeleton } from \"@/registry/default/ui/skeleton\"\n\ninterface ImageIpfsProps extends React.HTMLAttributes<HTMLImageElement> {\n  ipfsGatewayUrl?: string\n  src: string\n  alt: string\n  displayLoading?: boolean\n  displayError?: boolean\n}\n\nconst ImageIpfs = React.forwardRef<HTMLImageElement, ImageIpfsProps>(\n  (\n    {\n      className,\n      src,\n      alt,\n      ipfsGatewayUrl = \"https://ipfs.io/ipfs/\",\n      displayLoading = true,\n      displayError = true,\n      ...props\n    },\n    ref\n  ) => {\n    const [isLoading, setIsLoading] = React.useState(true)\n    const [isError, setIsError] = React.useState(false)\n\n    const imgSrc = React.useMemo(\n      () =>\n        src?.startsWith(\"ipfs://\")\n          ? src.replace(\"ipfs://\", ipfsGatewayUrl)\n          : src,\n      [src, ipfsGatewayUrl]\n    )\n\n    return (\n      <>\n        {displayError && isError ? (\n          <ErrorMessage\n            defaultErrorMessage=\"Error while fetching image\"\n            error={null}\n            {...props}\n          />\n        ) : displayLoading && isLoading ? (\n          <Skeleton className={className} {...props} />\n        ) : null}\n        <img\n          ref={ref}\n          alt={alt}\n          src={imgSrc}\n          onLoad={() => setIsLoading(false)}\n          onError={() => setIsError(true)}\n          className={cn((isLoading || isError) && \"hidden\", className)}\n          {...props}\n        />\n      </>\n    )\n  }\n)\n\nImageIpfs.displayName = \"ImageIpfs\"\n\nexport { ImageIpfs }\n"
    }
  ],
  "type": "components:buidl"
}