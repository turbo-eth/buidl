{
  "name": "erc20-balance",
  "dependencies": [
    "wagmi"
  ],
  "registryDependencies": [
    "skeleton",
    "error-message"
  ],
  "files": [
    {
      "name": "erc20-balance.tsx",
      "content": "import * as React from \"react\"\nimport { formatUnits } from \"viem\"\nimport { useAccount, useContractRead } from \"wagmi\"\n\nimport { ErrorMessage } from \"@/registry/default/buidl/error-message\"\nimport { Skeleton } from \"@/registry/default/ui/skeleton\"\n\nconst erc20BalanceOfAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const\n\nconst erc20DecimalsAbi = [\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const\n\nfunction trimFormattedBalance(balance: string | undefined, decimals = 4) {\n  if (!balance) {\n    return \"0\"\n  }\n  const [integer, decimal] = balance.split(\".\")\n  if (!decimal) return integer\n\n  const trimmedDecimal = decimal.slice(0, decimals)\n  return `${integer}.${trimmedDecimal}`\n}\n\nexport type Erc20BalanceProps = React.HTMLAttributes<HTMLDivElement> & {\n  address: `0x${string}`\n  chainId?: number\n  account?: `0x${string}`\n  formatDecimals?: number\n  displayLoading?: boolean\n  displayError?: boolean\n}\n\nconst Erc20Balance = React.forwardRef<HTMLDivElement, Erc20BalanceProps>(\n  (\n    {\n      chainId,\n      address,\n      account,\n      formatDecimals = 4,\n      displayLoading = true,\n      displayError = true,\n      ...props\n    },\n    ref\n  ) => {\n    const { address: currentAccount } = useAccount()\n    const selectedAccount = account ?? currentAccount\n\n    const {\n      data: decimals,\n      isLoading: isLoadingDecimals,\n      isError: isErrorDecimals,\n      error: errorDecimals,\n    } = useContractRead({\n      address,\n      abi: erc20DecimalsAbi,\n      functionName: \"decimals\",\n      chainId,\n    })\n\n    const {\n      data: balance,\n      isLoading: isLoadingBalance,\n      isError: isErrorBalance,\n      error: errorBalance,\n    } = useContractRead({\n      address,\n      abi: erc20BalanceOfAbi,\n      functionName: \"balanceOf\",\n      args: selectedAccount ? [selectedAccount] : undefined,\n      enabled: !!selectedAccount,\n      chainId,\n    })\n\n    if (displayLoading && (isLoadingDecimals || isLoadingBalance)) {\n      return <Skeleton className=\"h-6 w-16\" {...props} />\n    }\n\n    if (displayError && (isErrorDecimals || isErrorBalance)) {\n      return (\n        <ErrorMessage\n          defaultErrorMessage=\"Error while fetching ERC20 data\"\n          error={errorDecimals ?? errorBalance}\n          {...props}\n        />\n      )\n    }\n\n    if (balance === undefined || decimals === undefined) {\n      return null\n    }\n\n    return (\n      <div ref={ref} {...props}>\n        {trimFormattedBalance(formatUnits(balance, decimals), formatDecimals)}\n      </div>\n    )\n  }\n)\n\nErc20Balance.displayName = \"Erc20Balance\"\n\nexport { Erc20Balance }\n"
    }
  ],
  "folder": "erc20",
  "type": "components:buidl"
}