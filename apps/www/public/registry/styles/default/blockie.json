{
  "name": "blockie",
  "dependencies": [
    "wagmi"
  ],
  "registryDependencies": [
    "skeleton"
  ],
  "files": [
    {
      "name": "blockie.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport makeBlockie from \"ethereum-blockies-base64\"\nimport { useAccount } from \"wagmi\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Skeleton } from \"@/registry/default/ui/skeleton\"\n\nconst blockieVariants = cva(\"inline-block\", {\n  variants: {\n    variant: {\n      default:\n        \"rounded-full border-2 border-primary-foreground shadow-sm hover:shadow-md\",\n      curved:\n        \"rounded-md border-2 border-primary-foreground shadow-sm hover:shadow-md\",\n    },\n    size: {\n      default: \"h-10 w-10\",\n      sm: \"h-7 w-7\",\n      lg: \"h-12 w-12\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"default\",\n  },\n})\n\nexport type BlockieProps = React.HTMLAttributes<HTMLImageElement> &\n  VariantProps<typeof blockieVariants> & {\n    address?: `0x${string}`\n  }\n\nconst Blockie = React.forwardRef<HTMLImageElement, BlockieProps>(\n  ({ className, address, variant, size, ...props }, ref) => {\n    const [isLoading, setIsLoading] = React.useState(true)\n    const { address: connectedAddress, isConnecting } = useAccount()\n    const selectedAddress = address ?? connectedAddress ?? \"0x0\"\n\n    return (\n      <>\n        {isLoading || isConnecting ? (\n          <Skeleton\n            className={cn(blockieVariants({ variant, size, className }))}\n            {...props}\n          />\n        ) : null}\n        <img\n          ref={ref}\n          alt={`${address} blockie`}\n          onLoad={() => setIsLoading(false)}\n          className={cn(\n            blockieVariants({ variant, size, className }),\n            (isLoading || isConnecting) && \"hidden\"\n          )}\n          src={makeBlockie(selectedAddress)}\n          {...props}\n        />\n      </>\n    )\n  }\n)\n\nBlockie.displayName = \"Blockie\"\n\nexport { Blockie }\n"
    }
  ],
  "type": "components:buidl"
}