{
  "name": "blockie",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "blockie.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport makeBlockie from \"ethereum-blockies-base64\"\nimport { useAccount } from \"wagmi\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst blockieVariants = cva(\"inline-block\", {\n  variants: {\n    variant: {\n      default:\n        \"rounded-full border-2 border-primary-foreground shadow-sm hover:shadow-md\",\n      curved:\n        \"rounded-md border-2 border-primary-foreground shadow-sm hover:shadow-md\",\n    },\n    size: {\n      default: \"h-10 w-10\",\n      sm: \"h-7 w-7\",\n      lg: \"h-12 w-12\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"default\",\n  },\n})\n\nexport type BlockieProps = React.HTMLAttributes<HTMLImageElement> &\n  VariantProps<typeof blockieVariants> & {\n    address?: `0x${string}`\n  }\n\nexport const Blockie = ({\n  className,\n  address,\n  variant,\n  size,\n  ...props\n}: BlockieProps) => {\n  const { address: connectedAddress } = useAccount()\n  const selectedAddress = address ?? connectedAddress\n\n  if (!selectedAddress) return null\n\n  return (\n    <img\n      alt={`${address} blockie`}\n      className={cn(blockieVariants({ variant, size, className }))}\n      src={makeBlockie(selectedAddress)}\n      {...props}\n    />\n  )\n}\n"
    }
  ],
  "type": "components:buidl"
}