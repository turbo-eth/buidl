{
  "name": "transaction",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "transaction.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useTransaction } from \"wagmi\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ErrorMessage } from \"@/registry/default/buidl/error-message\"\nimport { Skeleton } from \"@/registry/default/ui/skeleton\"\n\ninterface TransactionProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"children\"> {\n  hash: `0x${string}`\n  chainId?: number\n  displayLoading?: boolean\n  displayError?: boolean\n}\n\nconst TransactionBlockHash = React.forwardRef<HTMLDivElement, TransactionProps>(\n  (\n    {\n      chainId,\n      hash,\n      className,\n      displayError = true,\n      displayLoading = true,\n      ...props\n    },\n    ref\n  ) => {\n    const { data, isSuccess, isLoading, isError, error } = useTransaction({\n      hash,\n      chainId,\n    })\n\n    if (isLoading && displayLoading)\n      return <Skeleton className={cn(\"h-6 w-[620px]\", className)} {...props} />\n\n    if (isError && displayError)\n      return (\n        <ErrorMessage\n          defaultErrorMessage=\"Error while fetching transaction data\"\n          error={error}\n          {...props}\n        />\n      )\n\n    if (isSuccess) {\n      return (\n        <div ref={ref} className={className} {...props}>\n          {data?.blockHash}\n        </div>\n      )\n    }\n\n    return null\n  }\n)\n\nTransactionBlockHash.displayName = \"TransactionBlockHash\"\n\nconst TransactionBlockNumber = React.forwardRef<\n  HTMLDivElement,\n  TransactionProps\n>(\n  (\n    {\n      chainId,\n      hash,\n      className,\n      displayError = true,\n      displayLoading = true,\n      ...props\n    },\n    ref\n  ) => {\n    const { data, isSuccess, isLoading, isError, error } = useTransaction({\n      hash,\n      chainId,\n    })\n\n    if (isLoading && displayLoading)\n      return <Skeleton className={cn(\"h-6 w-24\", className)} {...props} />\n\n    if (isError && displayError)\n      return (\n        <ErrorMessage\n          defaultErrorMessage=\"Error while fetching transaction data\"\n          error={error}\n          {...props}\n        />\n      )\n\n    if (isSuccess) {\n      return (\n        <div ref={ref} className={className} {...props}>\n          {data?.blockNumber.toString()}\n        </div>\n      )\n    }\n\n    return null\n  }\n)\n\nTransactionBlockNumber.displayName = \"TransactionBlockNumber\"\n\nconst TransactionFrom = React.forwardRef<HTMLDivElement, TransactionProps>(\n  (\n    {\n      chainId,\n      hash,\n      className,\n      displayError = true,\n      displayLoading = true,\n      ...props\n    },\n    ref\n  ) => {\n    const { data, isSuccess, isLoading, isError, error } = useTransaction({\n      hash,\n      chainId,\n    })\n\n    if (isLoading && displayLoading)\n      return <Skeleton className={cn(\"h-6 w-[400px]\", className)} {...props} />\n\n    if (isError && displayError)\n      return (\n        <ErrorMessage\n          defaultErrorMessage=\"Error while fetching transaction data\"\n          error={error}\n          {...props}\n        />\n      )\n\n    if (isSuccess) {\n      return (\n        <div ref={ref} className={className} {...props}>\n          {data?.from}\n        </div>\n      )\n    }\n\n    return null\n  }\n)\n\nTransactionFrom.displayName = \"TransactionFrom\"\n\nconst TransactionTo = React.forwardRef<HTMLDivElement, TransactionProps>(\n  (\n    {\n      chainId,\n      hash,\n      className,\n      displayError = true,\n      displayLoading = true,\n      ...props\n    },\n    ref\n  ) => {\n    const { data, isSuccess, isLoading, isError, error } = useTransaction({\n      hash,\n      chainId,\n    })\n\n    if (isLoading && displayLoading)\n      return <Skeleton className={cn(\"h-6 w-[400px]\", className)} {...props} />\n\n    if (isError && displayError)\n      return (\n        <ErrorMessage\n          defaultErrorMessage=\"Error while fetching transaction data\"\n          error={error}\n          {...props}\n        />\n      )\n\n    if (isSuccess) {\n      return (\n        <div ref={ref} className={className} {...props}>\n          {data?.from}\n        </div>\n      )\n    }\n\n    return null\n  }\n)\n\nTransactionTo.displayName = \"TransactionTo\"\n\nconst TransactionGas = React.forwardRef<HTMLDivElement, TransactionProps>(\n  (\n    {\n      chainId,\n      hash,\n      className,\n      displayError = true,\n      displayLoading = true,\n      ...props\n    },\n    ref\n  ) => {\n    const { data, isSuccess, isLoading, isError, error } = useTransaction({\n      hash,\n      chainId,\n    })\n\n    if (isLoading && displayLoading)\n      return <Skeleton className={cn(\"h-6 w-24\", className)} {...props} />\n\n    if (isError && displayError)\n      return (\n        <ErrorMessage\n          defaultErrorMessage=\"Error while fetching transaction data\"\n          error={error}\n          {...props}\n        />\n      )\n\n    if (isSuccess) {\n      return (\n        <div ref={ref} className={className} {...props}>\n          {data?.gas.toString()}\n        </div>\n      )\n    }\n\n    return null\n  }\n)\n\nTransactionGas.displayName = \"TransactionGas\"\n\nconst TransactionGasPrice = React.forwardRef<HTMLDivElement, TransactionProps>(\n  (\n    {\n      chainId,\n      hash,\n      className,\n      displayError = true,\n      displayLoading = true,\n      ...props\n    },\n    ref\n  ) => {\n    const { data, isSuccess, isLoading, isError, error } = useTransaction({\n      hash,\n      chainId,\n    })\n\n    if (isLoading && displayLoading)\n      return <Skeleton className={cn(\"h-6 w-12\", className)} {...props} />\n\n    if (isError && displayError)\n      return (\n        <ErrorMessage\n          defaultErrorMessage=\"Error while fetching transaction data\"\n          error={error}\n          {...props}\n        />\n      )\n\n    if (isSuccess) {\n      return (\n        <div ref={ref} className={className} {...props}>\n          {data?.gasPrice?.toString()}\n        </div>\n      )\n    }\n\n    return null\n  }\n)\n\nTransactionGasPrice.displayName = \"TransactionGasPrice\"\n\nconst TransactionNonce = React.forwardRef<HTMLDivElement, TransactionProps>(\n  (\n    {\n      chainId,\n      hash,\n      className,\n      displayError = true,\n      displayLoading = true,\n      ...props\n    },\n    ref\n  ) => {\n    const { data, isSuccess, isLoading, isError, error } = useTransaction({\n      hash,\n      chainId,\n    })\n\n    if (isLoading && displayLoading)\n      return <Skeleton className={cn(\"h-6 w-16\", className)} {...props} />\n\n    if (isError && displayError)\n      return (\n        <ErrorMessage\n          defaultErrorMessage=\"Error while fetching transaction data\"\n          error={error}\n          {...props}\n        />\n      )\n\n    if (isSuccess) {\n      return (\n        <div ref={ref} className={className} {...props}>\n          {data?.nonce.toString()}\n        </div>\n      )\n    }\n    return null\n  }\n)\n\nTransactionNonce.displayName = \"TransactionNonce\"\n\nexport {\n  TransactionBlockHash,\n  TransactionBlockNumber,\n  TransactionFrom,\n  TransactionGas,\n  TransactionGasPrice,\n  TransactionNonce,\n  TransactionTo,\n}\n"
    }
  ],
  "type": "components:buidl"
}