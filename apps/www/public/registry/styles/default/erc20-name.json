{
  "name": "erc20-name",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "erc20-name.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useContractRead } from \"wagmi\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Skeleton } from \"@/registry/default/ui/skeleton\"\n\nconst erc20NameAbi = [\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"name\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const\n\nconst ErrorMessage = ({ error }: { error: Error | null }) => {\n  return (\n    <div className={cn(\"break-words text-sm font-medium text-red-500\")}>\n      {error?.message ?? \"Error while fetching ERC20 data\"}\n    </div>\n  )\n}\n\nexport type Erc20NameProps = React.HTMLAttributes<HTMLSpanElement> & {\n  address: `0x${string}`\n  chainId?: number\n}\n\nconst Erc20Name = React.forwardRef<HTMLSpanElement, Erc20NameProps>(\n  ({ chainId, address, ...props }, ref) => {\n    const { data, isLoading, isError, error } = useContractRead({\n      address,\n      abi: erc20NameAbi,\n      functionName: \"name\",\n      chainId,\n    })\n\n    if (isLoading) {\n      return <Skeleton className=\"h-6 w-36\" {...props} />\n    }\n\n    if (isError) {\n      return <ErrorMessage error={error} />\n    }\n\n    if (data === undefined) {\n      return null\n    }\n\n    return (\n      <span ref={ref} {...props}>\n        {data}\n      </span>\n    )\n  }\n)\n\nErc20Name.displayName = \"Erc20Name\"\n\nexport { Erc20Name }\n"
    }
  ],
  "folder": "erc20",
  "type": "components:buidl"
}