{
  "name": "erc20-symbol",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "erc20-symbol.tsx",
      "content": "import { useEffect, useState } from \"react\"\nimport defaultTokenList from \"@/data/uniswap-default.tokenlist.json\"\nimport { useChainId } from \"wagmi\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { useErc20Symbol } from \"./erc20-wagmi\"\nimport { TokenList } from \"./types\"\nimport { findTokenByAddressFromList } from \"./utils/find-token-by-address-from-list\"\n\nexport type Erc20SymbolProps = React.HTMLAttributes<HTMLElement> & {\n  address: `0x${string}`\n  tokenList?: TokenList\n  chainId?: number\n  unavailable?: any\n}\n\nexport const Erc20Symbol = ({\n  className,\n  chainId,\n  address,\n  tokenList = defaultTokenList,\n  unavailable,\n}: Erc20SymbolProps) => {\n  const classes = cn(className)\n  const chainIdDefault = useChainId()\n\n  const [tokenSymbol, setTokenSymbol] = useState<string | undefined>()\n  const [tokenNotInList, setTokenNotInList] = useState<boolean>()\n  useEffect(() => {\n    const token = findTokenByAddressFromList(tokenList, address)\n    if (!token) {\n      setTokenNotInList(true)\n    }\n    if (token) {\n      setTokenSymbol(token.symbol)\n    }\n  }, [address, tokenList])\n\n  useEffect(() => {}, [])\n\n  const { data, isSuccess } = useErc20Symbol({\n    chainId: chainId || chainIdDefault,\n    address,\n    watch: true,\n    enabled: !!tokenNotInList,\n  })\n\n  useEffect(() => {\n    if (data && isSuccess) {\n      setTokenSymbol(data)\n    }\n  }, [data, isSuccess])\n\n  if (!tokenSymbol) {\n    const Comp = unavailable\n    if (!Comp) return null\n    return <Comp />\n  }\n\n  return <span className={classes}>{tokenSymbol}</span>\n}\n"
    }
  ],
  "folder": "erc20",
  "type": "components:buidl"
}