{
  "name": "ens-avatar",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "ens-avatar.tsx",
      "content": "\"useClient\"\n\nimport * as React from \"react\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { useAccount, useEnsAvatar, useEnsName } from \"wagmi\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Blockie } from \"@/registry/default/buidl/blockie\"\nimport { Skeleton } from \"@/registry/default/ui/skeleton\"\n\nconst ensAvatarVariants = cva(\"inline-block\", {\n  variants: {\n    variant: {\n      default:\n        \"rounded-full border-2 border-primary-foreground shadow-sm hover:shadow-md\",\n      curved:\n        \"rounded-md border-2 border-primary-foreground shadow-sm hover:shadow-md\",\n    },\n    size: {\n      default: \"h-10 w-10\",\n      sm: \"h-7 w-7\",\n      lg: \"h-12 w-12\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"default\",\n  },\n})\n\ninterface EnsAvatarProps\n  extends React.HTMLAttributes<HTMLImageElement>,\n    VariantProps<typeof ensAvatarVariants> {\n  address?: `0x${string}`\n  name?: string\n  displayLoading?: boolean\n}\n\nconst EnsAvatar = React.forwardRef<HTMLImageElement, EnsAvatarProps>(\n  (\n    {\n      className,\n      address,\n      name,\n      variant,\n      size,\n      displayLoading = true,\n      ...props\n    },\n    ref\n  ) => {\n    const [isLoadingImg, setIsLoadingImg] = React.useState(true)\n\n    const { address: connectedAddress } = useAccount()\n    const selectedAddress = address ?? connectedAddress\n\n    const { data: dataEnsName, isLoading: isLoadingEnsName } = useEnsName({\n      chainId: 1,\n      address: selectedAddress,\n      enabled: !name && !!selectedAddress,\n    })\n\n    const ensName = name ?? dataEnsName\n\n    const { data: dataEnsAvatar, isLoading: isLoadingEnsAvatar } = useEnsAvatar(\n      {\n        chainId: 1,\n        name: ensName,\n        enabled: !!ensName,\n      }\n    )\n\n    if (\n      displayLoading &&\n      (isLoadingEnsName || isLoadingEnsAvatar || !selectedAddress)\n    ) {\n      return (\n        <Skeleton\n          className={cn(\n            \"h-10 w-10\",\n            ensAvatarVariants({ variant, size, className })\n          )}\n        />\n      )\n    }\n\n    if (dataEnsAvatar) {\n      return (\n        <>\n          {isLoadingImg ? (\n            <Skeleton\n              className={cn(ensAvatarVariants({ variant, size, className }))}\n              {...props}\n            />\n          ) : null}\n          <img\n            ref={ref}\n            alt={`${selectedAddress} EnsAvatar`}\n            className={cn(\n              ensAvatarVariants({ variant, size, className }),\n              isLoadingImg && \"hidden\"\n            )}\n            onLoad={() => {\n              setIsLoadingImg(false)\n            }}\n            src={dataEnsAvatar}\n            {...props}\n          />\n        </>\n      )\n    }\n\n    return (\n      <Blockie\n        address={selectedAddress}\n        className={cn(\"w-10\", ensAvatarVariants({ variant, size }), className)}\n      />\n    )\n  }\n)\n\nEnsAvatar.displayName = \"EnsAvatar\"\n\nexport { EnsAvatar }\n"
    }
  ],
  "type": "components:buidl"
}