{
  "name": "erc721-metadata",
  "dependencies": [
    "wagmi"
  ],
  "files": [
    {
      "name": "erc721-metadata.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useContractRead, useQuery, type Address } from \"wagmi\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Skeleton } from \"@/registry/default/ui/skeleton\"\n\nconst erc721TokenUriAbi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"tokenURI\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const\n\ninterface useERC721MetadataProps {\n  tokenId: bigint\n  ipfsGatewayUrl?: string\n  address?: Address\n  chainId?: number\n}\ninterface IERC721Metadata {\n  name?: string\n  description?: string\n  image: string\n  attributes: Array<{\n    trait_type: string\n    value: string\n  }>\n}\n\nfunction useERC721Metadata({\n  address,\n  chainId,\n  tokenId,\n  ipfsGatewayUrl = \"https://ipfs.io/ipfs/\",\n}: useERC721MetadataProps) {\n  const { data, isLoading, isError, error } = useContractRead({\n    address,\n    abi: erc721TokenUriAbi,\n    functionName: \"tokenURI\",\n    args: [tokenId],\n    chainId,\n  })\n\n  const metadataQuery = useQuery(\n    [\"erc721-metadata\", address, chainId, tokenId, data],\n    {\n      queryFn: async () => {\n        if (!data) throw new Error(\"No tokenUri found\")\n        const uri = data.replace(\"ipfs://\", \"\")\n        const response = await fetch(`${ipfsGatewayUrl}${uri}`)\n        const json = (await response.json()) as IERC721Metadata\n\n        if (!json.image) throw new Error(\"No image found in metadata\")\n        if (!json.attributes) throw new Error(\"No attributes found in metadata\")\n\n        json.image = json.image.startsWith(\"ipfs://\")\n          ? json.image.replace(\"ipfs://\", `${ipfsGatewayUrl}`)\n          : json.image\n        return json\n      },\n      enabled: !!data,\n    }\n  )\n\n  return {\n    isLoading: isLoading || metadataQuery.isLoading,\n    isError: isError || metadataQuery.isError,\n    error: error || metadataQuery.error,\n    data: metadataQuery.data,\n  }\n}\n\nconst ErrorMessage = ({ error }: { error: Error | null }) => {\n  return (\n    <div className={cn(\"break-words text-sm font-medium text-red-500\")}>\n      {error?.message ?? \"Error while fetching ERC721 data\"}\n    </div>\n  )\n}\n\nexport type Erc721MetadataProps = React.HTMLAttributes<HTMLElement> & {\n  address: `0x${string}`\n  tokenId: number | string | bigint\n  chainId?: number\n  ipfsGatewayUrl?: string\n}\n\nconst Erc721MetadataImage = React.forwardRef<\n  HTMLImageElement,\n  Erc721MetadataProps\n>(({ chainId, address, tokenId, ipfsGatewayUrl, ...props }, ref) => {\n  const { data, isLoading, isError, error } = useERC721Metadata({\n    address,\n    chainId,\n    tokenId: BigInt(tokenId),\n    ipfsGatewayUrl,\n  })\n\n  if (isLoading) {\n    return <Skeleton className=\"h-6 w-12\" {...props} />\n  }\n\n  if (isError) {\n    return <ErrorMessage error={error as Error | null} />\n  }\n\n  if (data?.image === undefined) {\n    return null\n  }\n\n  return <img alt={`${tokenId} image`} ref={ref} {...props} src={data.image} />\n})\n\nErc721MetadataImage.displayName = \"Erc721MetadataImage\"\n\nexport { Erc721MetadataImage }\n"
    }
  ],
  "folder": "erc721",
  "type": "components:buidl"
}